# -*- coding: utf-8 -*-
"""DonorFeedback.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uX0vhlkkUSKO9H3jLBbrCXirf-iGvTZP
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# Import required modules
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import numpy as np
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Define the scope
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

# Provide the path to the JSON file
creds = ServiceAccountCredentials.from_json_keyfile_name('/content/drive/Shareddrives/SFTT Shared Drive/0General Management & Admin/Employee Onboarding/SFTT Specific Employees/Summer 2024/Katherine Anne/Colabs/enhanced-keel-424914-m2-7c2e82d072b9.json', scope)

# Authorize the clientsheet
client = gspread.authorize(creds)

# Read In Data
DonorFeedback_url = 'https://docs.google.com/spreadsheets/d/1XMv175FaBoRLTVLIWoQKAw0B7K10HkIBkPjoeN8TGGw/edit?gid=671560925#gid=671560925'
DonorFeedback_Sheets = client.open_by_url(DonorFeedback_url)
DonorFeedback_Sheet1 = DonorFeedback_Sheets.get_worksheet(0)
DonorFeedback_Data = DonorFeedback_Sheet1.get_all_values()
DonorFeedback_df = pd.DataFrame(DonorFeedback_Data[1:], columns = DonorFeedback_Data[0])

# Concatenate all columns into one series
MissionAspects_df = pd.concat([DonorFeedback_df['Mission Aspects 1'], DonorFeedback_df['Mission Aspects 2'], DonorFeedback_df['Mission Aspects 3']])

# Drop rows where all elements are NaN or blank
MissionAspects_df.replace('', pd.NA, inplace=True)
MissionAspects_df.dropna(how='all', inplace=True)

# Find the counts of each category
category_counts = MissionAspects_df.value_counts()

# Custom Colors
colors = {
    'Planting/Preserving': '#5E9B4F', # dark green (left tree)
    'Air Quality/Climate Change': '#98735D', # dark brown
    'Environmental Justice': '#8FC640', # med green (middle tree)
    'Community': '#E6BEAE', # light brown
    'Empowerment': '#D8E264' # light green (right tree)
}

category_colors = [colors[category] for category in category_counts.index]


# Create pie chart
fig, ax = plt.subplots(figsize=(10, 7))
wedges, texts, autotexts = ax.pie(category_counts, autopct='%1.1f%%', startangle=140, colors=category_colors)
ax.legend(wedges, category_counts.index, title="Categories", loc="center left", bbox_to_anchor=(0.85, 0.5))
plt.title('Mission Aspect Importance')
plt.axis('equal')
plt.show()

# Concatenate all columns into one series
Involvement_df = pd.concat([DonorFeedback_df['Involvement 1'], DonorFeedback_df['Involvement 2'], DonorFeedback_df['Involvement 3']])

# Drop rows where all elements are NaN or blank
Involvement_df.replace('', pd.NA, inplace=True)
Involvement_df.dropna(how='all', inplace=True)

# Find the counts of each category
category_counts = Involvement_df.value_counts()

# Custom Colors
colors = {
    'Donation': '#5E9B4F', # dark green (left tree)
    'Event Attendance': '#8FC640', # med green (middle tree)
    'Tree Recipient': '#D8E264', # light green (right tree)
    'Read Newsletter': '#E6BEAE', # light brown
    'Volunteer/Promotion': '#98735D', # dark brown
}

category_colors = [colors[category] for category in category_counts.index]


# Create pie chart
fig, ax = plt.subplots(figsize=(10, 7))
wedges, texts, autotexts = ax.pie(category_counts, autopct='%1.1f%%', startangle=140, colors=category_colors)
ax.legend(wedges, category_counts.index, title="Categories", loc="center left", bbox_to_anchor=(0.85, 0.5))
plt.title('Current Donor Involvement')
plt.axis('equal')
plt.show()