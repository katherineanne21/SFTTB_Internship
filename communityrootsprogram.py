# -*- coding: utf-8 -*-
"""CommunityRootsProgram.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lEVPa_F9vNnZGxP-H1hbvVeOsKGAHQG8
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# Import required modules
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point, Polygon, shape
from geopy.geocoders import Nominatim

# Read in shp file
gdf_CRP = gpd.read_file("/content/drive/Shareddrives/SFTT Shared Drive/0General Management & Admin/Employee Onboarding/SFTT Specific Employees/Summer 2024/Katherine Anne/Colabs/GIS/Community Roots Program/Community Roots Program/CommunityRootsProgram.shp")

gdf_zips = gpd.read_file("/content/drive/Shareddrives/SFTT Shared Drive/0General Management & Admin/Employee Onboarding/SFTT Specific Employees/Summer 2024/Katherine Anne/Colabs/GIS/Community Roots Program/zipcodes_nt/ZIPCODES_NT_POLY.shp")

# Add in a column into the shapefile for zip code
print(gdf_CRP.columns.tolist())
print(gdf_zips.columns.tolist())

# Check the CRS
gdf_zips = gdf_zips.to_crs(gdf_CRP.crs)

# Perform a left spatial join, keeping all rows from gdf_CRP
gdf_merged = gdf_CRP.sjoin(gdf_zips, how='left', predicate='intersects')

pd.set_option('display.max_rows', None)
gdf_merged = gdf_merged[['GEOID10','POSTCODE','SN_C']]
print(gdf_merged)

# Ensure POSTCODE is treated as string and handle NaNs
gdf_merged['POSTCODE'] = gdf_merged['POSTCODE'].astype(str).fillna('')

# Group by the index of gdf_CRP to aggregate postcodes
# Assuming `index` is the original index from `gdf_CRP`
grouped_df = gdf_merged.groupby(gdf_merged.index)['POSTCODE'].apply(lambda x: ', '.join(x)).reset_index()

# Merge the aggregated results back to the original gdf_CRP
result_df = gdf_CRP.merge(grouped_df, left_index=True, right_on='index')

# Drop the temporary index column used for merging
result_df = result_df.drop(columns=['index'])

# Choose columns
result_df = result_df[['GEOID10','POSTCODE','SN_C']]

# Filter rows where SN_C is 1
result_df = result_df[result_df['SN_C'] == 1]

print(result_df)

# Define the path to the Excel file
file_path = '/content/drive/Shareddrives/SFTT Shared Drive/0General Management & Admin/Employee Onboarding/SFTT Specific Employees/Summer 2024/Katherine Anne/Colabs/GIS/Community Roots Program/CRP_List.xlsx'

# Save the DataFrame to an Excel file
result_df.to_excel(file_path, index=False, engine='openpyxl')